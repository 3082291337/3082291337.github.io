<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="回眸"><a href="#回眸" class="headerlink" title="回眸"></a>回眸</h1><p>​        <strong>席慕蓉</strong></p><p>前世，我频频回眸</p><p>挥别的手帕飘成一朵云</p><p>多少相思多少离愁</p><p>终成一道水痕送我远走</p><p>今生，</p><p>我寻觅前世失落的足迹</p><span id="more"></span><p>跋山涉水走进你的眼中</p><p>前世的五百次回眸</p><p>换得今生的一次擦肩而过</p><p>我用一千次回眸</p><p>换得今生在你面前的驻足停留</p><p>问佛：</p><p>要多少次回眸才能真正住进你的心中</p><p>佛无语,我只有频频回首</p><p>像飞蛾扑向火</p><p>可以不计后果可以不要理由</p><p>回眸 再回眸</p><p>千次万次你在我眼中也在我心中</p><p>我频频回顾着期待你的温柔</p><p>我频频回顾着渴望长相厮守</p><p>前世我在舟中回眸</p><p>莲叶一片一片连成我眼中的哀愁</p><p>今生佛成全我的思念</p><p>让我走进你的眼中</p><p>我寻觅了很久累了</p><p>只想在你怀中停息</p><p>只想让你的手揩去我脸上的泪痕</p><p>只想让你的体温温暖我冰凉的双手</p><p>不要问我</p><p>为何今生千里迢迢将你寻觅</p><p>我没有喝孟婆汤</p><p>心中牵挂着你</p><p>不要问我为何哭泣</p><p>我没有喝孟婆汤</p><p>仍记得前世离别时心底的绝望</p><p>说我喜极而泣吧</p><p>泪落在你的襟上</p><p>前世的种种哀愁</p><p>开成一树繁密的丁香</p><p>我只想与你携手在树下看</p><p>那一朵开成五瓣向我们预言幸福</p><p>今生</p><p>我仍旧频频回望</p><p>今生</p><p>我仍旧不喝孟婆汤</p><p>来世我还会</p><p>千里迢迢将你寻觅</p><p>来世我还会和你</p><p>手牵手寻找五瓣的丁香</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机数码管（二）</title>
      <link href="posts/d190.html"/>
      <url>posts/d190.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：本文将上文用到的四位数数码管和之前学习的定时器结合，做一个实验。</p></blockquote><span id="more"></span><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><h3 id="（一）需要用到的工具"><a href="#（一）需要用到的工具" class="headerlink" title="（一）需要用到的工具"></a>（一）需要用到的工具</h3><p>Proteus 8 professional<br>keil 5</p><h3 id="（二）实验目标"><a href="#（二）实验目标" class="headerlink" title="（二）实验目标"></a>（二）实验目标</h3><p>用四位数码管显示和一个按键实现功能:1、四位数码管分为：分钟位（高2位）、秒位（低2位）。平时正常计时。2、按键按下一次，数码管停止计时。3、按键再次按下，数码管恢复计时</p><!-- more --><h1 id="实验原理图"><a href="#实验原理图" class="headerlink" title="实验原理图"></a>实验原理图</h1><p><img src="http://q8xe5o8a1.bkt.clouddn.com/%E8%AE%A1%E6%97%B6%E5%99%A8.png"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg51.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;intrins.h></span></span><span class="token comment" spellcheck="true">//c51函数头文件</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token macro property">#<span class="token directive keyword">define</span> uint unsigned int</span>uchar code segtab<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token comment" spellcheck="true">//字形码表</span><span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xf9</span><span class="token punctuation">,</span><span class="token number">0xa4</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xc6</span><span class="token punctuation">,</span><span class="token number">0xa1</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x8e</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x8c</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">}</span><span class="token punctuation">;</span>uchar dbuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示缓存</span>uint count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于累加定时器T0的溢出中断次数</span>uint sec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 秒计数器</span>uchar mode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前模式</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//延时约1ms</span><span class="token punctuation">{</span>    uchar i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//数码管动态显示程序，将显示缓存dbuf[]中的数据在四位数码管上显示一遍</span><span class="token punctuation">{</span>    uchar n<span class="token punctuation">,</span>bsel<span class="token punctuation">;</span>    bsel<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最初点亮的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P2<span class="token operator">=</span>bsel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位选口</span>        P0<span class="token operator">=</span>segtab<span class="token punctuation">[</span>dbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示缓存单元的数据查出字形码表</span>        bsel<span class="token operator">=</span><span class="token function">_crol_</span><span class="token punctuation">(</span>bsel<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//准备显示下一位</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每位显示时长约为1ms</span>        P0<span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//熄灭数码管，消影。因为延时时间太短，会出现鬼影状态。这一句必不可少</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">int0</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">0</span><span class="token comment" spellcheck="true">//外部中断</span><span class="token punctuation">{</span>    mode<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过外部中断的次数来控制定时器的打开和关闭</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开始</span>        TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器T0</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mode<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//暂停</span>    <span class="token punctuation">{</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭定时器T0</span>        mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重置mode</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">time0</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>interrupt <span class="token number">1</span><span class="token comment" spellcheck="true">//定时器T0中断</span><span class="token punctuation">{</span>    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//中断次数加一</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//循环4000次达到定时1s的功能</span>    <span class="token punctuation">{</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重置count</span>        sec<span class="token operator">++</span><span class="token punctuation">;</span>        dbuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> sec<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将中断次数转换，来确定segtab的值</span>        dbuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sec<span class="token operator">/</span><span class="token number">100</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        dbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span>sec<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        dbuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span>sec<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    IT0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部中断负跳变触发</span>    EX0 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//允许外部中断0中断</span>    TMOD <span class="token operator">=</span><span class="token number">0X02</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择定时器T0工作方式二</span>    TH0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T0的定时时间为0.25ms</span>    TL0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">;</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//允许T0中断</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//停止定时器</span>    EA <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开cpu总中断</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用数码管动态显示程序</span>    <span class="token punctuation">}</span></code></pre><h2 id="思路-与上篇博文一样，数码管显示用的是动态扫描法，通过定时器T0工作方式二定时0-25ms，循环4000次达到1s的计时，通过定时中断的次数来控制数码管显示。用外部中断来控制秒表的开始和暂停。"><a href="#思路-与上篇博文一样，数码管显示用的是动态扫描法，通过定时器T0工作方式二定时0-25ms，循环4000次达到1s的计时，通过定时中断的次数来控制数码管显示。用外部中断来控制秒表的开始和暂停。" class="headerlink" title="思路:与上篇博文一样，数码管显示用的是动态扫描法，通过定时器T0工作方式二定时0.25ms，循环4000次达到1s的计时，通过定时中断的次数来控制数码管显示。用外部中断来控制秒表的开始和暂停。"></a>思路:与上篇博文一样，数码管显示用的是动态扫描法，通过定时器T0工作方式二定时0.25ms，循环4000次达到1s的计时，通过定时中断的次数来控制数码管显示。用外部中断来控制秒表的开始和暂停。</h2><h1 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结:"></a>实验小结:</h1><p>运用中断时要特别注意中断的优先级。运用定时器时需根据自己想要实现的功能来选择工作方式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机数码管</title>
      <link href="posts/d11a.html"/>
      <url>posts/d11a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：数码管有动态显示与静态显示两种，本文用的是动态显示</p></blockquote><span id="more"></span><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><h3 id="（一）需要用到的工具"><a href="#（一）需要用到的工具" class="headerlink" title="（一）需要用到的工具"></a>（一）需要用到的工具</h3><p>Proteus 8 professional<br>keil 5</p><h3 id="（二）实验目标"><a href="#（二）实验目标" class="headerlink" title="（二）实验目标"></a>（二）实验目标</h3><p>控制四位数码管，显示1234</p><h1 id="实验原理图"><a href="#实验原理图" class="headerlink" title="实验原理图"></a>实验原理图</h1><p><img src="http://q8xe5o8a1.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20200505172016.png"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg51.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;intrins.h></span></span><span class="token comment" spellcheck="true">//c51函数头文件</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span>uchar code segtab<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token comment" spellcheck="true">//共阳极字形码表</span><span class="token punctuation">{</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xf9</span><span class="token punctuation">,</span><span class="token number">0xa4</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xc6</span><span class="token punctuation">,</span><span class="token number">0xa1</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0x8e</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x8c</span><span class="token punctuation">}</span><span class="token punctuation">;</span>uchar dbuf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示缓存</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//延时函数，延时时间约为1ms</span><span class="token punctuation">{</span>    uchar i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//数码管动态显示程序，将显示缓存dbuf[]中的数据在四位数码管上显示一遍</span><span class="token punctuation">{</span>    uchar n<span class="token punctuation">,</span>bsel<span class="token punctuation">;</span>    bsel<span class="token operator">=</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最初点亮的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P2<span class="token operator">=</span>bsel<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//位选口</span>        P0<span class="token operator">=</span>segtab<span class="token punctuation">[</span>dbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示缓存单元的数据查出字形码表</span>        bsel<span class="token operator">=</span><span class="token function">_crol_</span><span class="token punctuation">(</span>bsel<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//准备显示下一位</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每位显示时长约为1ms</span>        P0<span class="token operator">=</span><span class="token number">0xff</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//熄灭数码管，消影。因为延时时间太短，会出现鬼影状态。这一句必不可少</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//反复调用动态显示程序</span>    <span class="token punctuation">{</span>        <span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用动态显示程序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="思路-用动态扫描显示法，即每次只有一个数码管被点亮，由于人眼有视觉暂留现象，只要以较快的的速度令4个数码挂依次轮流点亮，看起来会觉得四个数码管是同时被点亮了。"><a href="#思路-用动态扫描显示法，即每次只有一个数码管被点亮，由于人眼有视觉暂留现象，只要以较快的的速度令4个数码挂依次轮流点亮，看起来会觉得四个数码管是同时被点亮了。" class="headerlink" title="思路:用动态扫描显示法，即每次只有一个数码管被点亮，由于人眼有视觉暂留现象，只要以较快的的速度令4个数码挂依次轮流点亮，看起来会觉得四个数码管是同时被点亮了。"></a>思路:用动态扫描显示法，即每次只有一个数码管被点亮，由于人眼有视觉暂留现象，只要以较快的的速度令4个数码挂依次轮流点亮，看起来会觉得四个数码管是同时被点亮了。</h2><h2 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果:"></a>仿真结果:</h2><p><img src="http://q8xe5o8a1.bkt.clouddn.com/%E5%AE%9E%E9%AA%8C1.png"></p><h1 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结:"></a>实验小结:</h1><p>运用动态扫描法会出现鬼影现象，所以代码最后的P0=0xff不能省，一定要注意。仿真原理图上省略链接了很多元器件。实际操作时要注意。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机串行通信</title>
      <link href="posts/b9fc.html"/>
      <url>posts/b9fc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：数据通信是指计算机CPU与外部设备之间、计算机与计算机之间的信息交换称之为数据通信。基本通信方式有两种：并行通信和串行通信。本文讲的是串行通信。</p></blockquote><h1 id="一、串行通信基础"><a href="#一、串行通信基础" class="headerlink" title="一、串行通信基础"></a>一、串行通信基础</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>数据在单条一位宽的传输线上，一比特接一比特地按顺序传送的方式称为串行通信，它是一种设备与设备之间的数据交通方式。</p><h2 id="1-2-特点及内部结构"><a href="#1-2-特点及内部结构" class="headerlink" title="1.2 特点及内部结构"></a>1.2 特点及内部结构</h2><p>（1）优点：节省传输线，这是显而易见的。尤其是在远程通信时，此特点尤为重要。这也是串行通信的主要优点。<br>     缺点：数据传送效率低。</p><p>（2）内部结构<br><img src="http://q8xe5o8a1.bkt.clouddn.com/v2-bf317fa170842a7135a8382db77f9740_r.jpg"></p><span id="more"></span><h2 id="1-3-串行通信标椎"><a href="#1-3-串行通信标椎" class="headerlink" title="1.3 串行通信标椎"></a>1.3 串行通信标椎</h2><p>（1）有RS-232C / RS-422A / RS-485EIA（电子工业协会的通信标准），但是其中使用最为广泛的是RS-232C标准。</p><p>（2）电平转换电路<br>我们要让pc端与串口之间能进行串行通信，需要进行电平转换。因为PC 串口标准<a href="www.baidu.com">RS232</a>的电平为+12V为逻度辑负知，-12为逻辑正。而单片机<a href="www.baidu.com">TTL电平</a>为5V为逻辑正，0为逻辑负。两者电平不同，要通信就要把电平转换，一般选常见的<a href="www.baidu.com">MAX232</a>芯片进行转换</p><p> (3) 通信线的连接<br> <img src="http://q8xe5o8a1.bkt.clouddn.com/IMG_20200426_145125.jpg"></p><p>其中TXD:数据输出端，串行数据由此送出。<br>   RXD：数据输入端，串行数据由此输入。<br>    GND：信号地线。</p><p> 具体可考参考<a href="https://www.contec.com/support/basic-knowledge/daq-control/serial-communicatin/">串口通信基础知识</a></p><h2 id="2-、51单片机串行口的相关寄存器"><a href="#2-、51单片机串行口的相关寄存器" class="headerlink" title="2 、51单片机串行口的相关寄存器"></a>2 、51单片机串行口的相关寄存器</h2><p> 51单片机串口通信，重点就SCON，PCON，SBUF三个寄存器，其中SBUE是数据缓存器</p><p> （1）SCON：<br> <img src="http://q8xe5o8a1.bkt.clouddn.com/20170214144224710.png"></p><ul><li>SM0、SM1：串口工作方式选择位<br><img src="http://q8xe5o8a1.bkt.clouddn.com/20170214144303757.png"></li><li>SM2，多机通信控制位<br>通常应把该位置0；在方式2和3中，进行多机通信时，该位需要置1.</li><li>REN，允许串行接收位<br>REN=1，启动串行口接收数据；<br>REN=0，禁串行口接收数据</li></ul><ul><li>TB8，只用在在方式2或方式3中，是发送数据的第九位，可以用软件规定其作用。可以用作数据的奇偶校验位，或在多机通信中，作为地址帧/数据帧的标志位。</li><li>RB8，在方式2或方式3中，是接收到数据的第九位，作为奇偶校验位或地址帧/数据帧的标志位。在方式1时，若SM2=0，则RB8是接收到的停止位。</li><li>TI，发送中断标志位。必须用软件将其清0。</li><li>RI，接收中断标志位。必须用软件将其清0。</li></ul><p>（2）PCON：<br><img src="http://q8xe5o8a1.bkt.clouddn.com/20170214144456336.png"><br>PCON寄存器中只有其最高位(SMOD位)与串行通信有关，其他位则用于电源</p><ul><li>SMOD:波特率加倍位。当该位设为“1”时，所设定的波特率被加倍。(注意:PCON寄存器是不能位寻址的，所以使用“SMOD=1;”或“SMOD=0;”语句都是非法的，将SMOD置1可用“PCON|= 0x80;”语句，将SMOD清0可用“PCON&amp;.=0x7F;”语句。)</li><li>SBUF 寄存器：它是两个在物理上独立的接收、发送缓冲器，可同时发送、接收数据，可通过指令对SBUF 的读写来区别是对接收缓冲器的操作还是对发送缓冲器的操作。从而控制外部两条独立的收发信号线RXD（P3.0）、TXD（P3.1），同时发送、接收数据，实现全双工。<h2 id="2-1波特率的计算"><a href="#2-1波特率的计算" class="headerlink" title="2.1波特率的计算"></a>2.1波特率的计算</h2>串行通信中，收发双方对发送或接收数据的速率要有约定。通过软件可对单片机串行口编程为四种工作方式，其中方式0和方式2的波特率是固定的，而方式1和方式3的波特率是可变的，由定时器T1的溢出率来决定。<br>它们的计算方式为</li></ul><p>（1）方式0的波特率 = fosc/12</p><p>（2）方式1的波特率 =（2^SMOD/32）•（T1溢出率）</p><p>（3）方式2的波特率 =（2^SMOD/64）• fosc</p><p>（4）方式3的波特率 =（2^SMOD/32）•（T1溢出率）</p><p>注：Fosc为晶体振荡器的频率,波特率与定时器的初值计算容易混淆，应当注意。</p><p><strong>（本文将用工作方式1）</strong></p><p>参考链接<a href="https://blog.csdn.net/gjxman1314/article/details/55099227">51单片机串口通信</a></p><h1 id="二、实验"><a href="#二、实验" class="headerlink" title="二、实验"></a>二、实验</h1><h2 id="1、需实现的功能："><a href="#1、需实现的功能：" class="headerlink" title="1、需实现的功能："></a>1、需实现的功能：</h2><p>当我们在PC上的COMTool中发送’a’时，单片机连接的LED每隔1s闪烁1次。当我们在COMTool中发送’b’时，单片机连接的LED每隔2s闪烁1次。当我们在COMTool中发送’c’时，单片机连接的LED熄灭</p><h2 id="2、实验准备"><a href="#2、实验准备" class="headerlink" title="2、实验准备"></a>2、实验准备</h2><p>需要的软件：</p><p>（1）Proteus 8 professional</p><p>（2）Virtual Serial Port Driver 9.0</p><p>（3）COMTool</p><h2 id="3、原理图"><a href="#3、原理图" class="headerlink" title="3、原理图"></a>3、原理图</h2><p><img src="http://q8xe5o8a1.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20200426155902.png"></p><h2 id="4、具体调试步骤"><a href="#4、具体调试步骤" class="headerlink" title="4、具体调试步骤"></a>4、具体调试步骤</h2><p>首先通过vspd创建串口对，然后将keil生成的hex文件导入protues，注意配置com时的波特率应与代码的一致。接着进行仿真，在COMTool上打开对应的串口，最后在COMTool上发送‘a’或‘b’或‘c’，然后观察实验现象。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//查询法</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg51.h></span></span>sbit LED <span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> receiveData <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个接收数据的变量</span><span class="token keyword">void</span> <span class="token function">UsartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//串行口初始化</span><span class="token punctuation">{</span>    TMOD <span class="token operator">=</span> <span class="token number">0X20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器T1工作方式二</span>    TH1  <span class="token operator">=</span> <span class="token number">0XFD</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//波特率9600,晶振为11.0592MHZ</span>    TL1  <span class="token operator">=</span> <span class="token number">0XFD</span><span class="token punctuation">;</span>     TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    SCON <span class="token operator">=</span> <span class="token number">0X50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工作方式一</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定时0.25ms</span><span class="token punctuation">{</span>    TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0X02</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器T0工作方式二</span>    TH0<span class="token operator">=</span><span class="token number">0x6</span><span class="token punctuation">;</span>    TL0<span class="token operator">=</span><span class="token number">0x6</span><span class="token punctuation">;</span>    ET0 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    EA <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器总中断</span>    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     LED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小灯的初始状态</span>        <span class="token function">UsartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用串口</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">while</span><span class="token punctuation">(</span>RI<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待接收完一个字符</span>        RI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除接受标志</span>        receiveData <span class="token operator">=</span>SBUF<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将接收寄存器的数据取出来</span>        <span class="token function">TimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用定时器T0定时</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Tmier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span> <span class="token comment" spellcheck="true">//定时器T0中断</span><span class="token punctuation">{</span>            <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>receiveData <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//选择闪烁模式</span>            <span class="token punctuation">{</span>                 i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4000</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    LED <span class="token operator">=</span><span class="token operator">~</span>LED<span class="token punctuation">;</span>                    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>receiveData <span class="token operator">==</span> <span class="token string">'b'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">8000</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    LED <span class="token operator">=</span><span class="token operator">~</span>LED<span class="token punctuation">;</span>                    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>receiveData <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                LED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>                </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习日志（二）</title>
      <link href="posts/991b.html"/>
      <url>posts/991b.html</url>
      
        <content type="html"><![CDATA[<h1 id="80C51单片机-LED定时1s闪烁"><a href="#80C51单片机-LED定时1s闪烁" class="headerlink" title="80C51单片机-LED定时1s闪烁"></a>80C51单片机-LED定时1s闪烁</h1><blockquote><p>前言：上篇博文中我们用到的是定时器T0的工作方式一，本篇博文将用到T0的工作模式二来实现功能。</p></blockquote><h2 id="一、实验须知："><a href="#一、实验须知：" class="headerlink" title="一、实验须知："></a>一、实验须知：</h2><p>（1）51单片机定时器T0/T1工作方式2为：自动再装入的8位计数器。</p><p>（2）在方式2中，TLx作为8位计数器，THx负责存储计数初值。当计数溢出时，自动将THx中存储的时间常数送入   TLx，使TLx从这一初值开始重新计数。再装入后，THx的值不变。</p><p>  (3）T0/T1工作模式二和与方式0和1工作原理大致相同，但工作模式二为8位自动重装计时器，它与工作方式0/1的最大区别是使用时不用二次给它赋初值。</p><p>  (4)TLx与THx的初值的计算与方式0/1大致相同，12T机器周期，则12MHz的晶振输入，得到1 MHz的机器周期,进而得到8计数器每滴答一下就是1us时间。8位的定时器可以计数256个数，即256us = 0.256ms.如果我们要定时x时间，则x/1us 得到要计数多少个，我们几位N。则256-N就为我们的初值。在这个初值的基础上,计数N个后产生溢出，即向CPU发起中断。<br><br><br></p><h2 id="二、实验过程："><a href="#二、实验过程：" class="headerlink" title="二、实验过程："></a>二、实验过程：</h2><ul><li><strong>（1）程序需实现的功能：实现小灯1s亮、1s灭、依次循环往复。</strong></li></ul><ul><li> <strong>(2)实验原理图：</strong><br><img src="http://q8xe5o8a1.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20200417173557.png"><h3 id="（3）代码："><a href="#（3）代码：" class="headerlink" title="（3）代码："></a>（3）代码：</h3></li></ul><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;reg51.h></span>  </span><span class="token comment" spellcheck="true">/*51单片机头文件，加上该语句后，可直接使用单片机的特殊功能寄存器*/</span>sbit led <span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将LED接在P1.0引脚</span> <span class="token keyword">void</span> <span class="token function">TimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置定时器，定时0.25ms</span><span class="token punctuation">{</span>    TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0X02</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择定时器T0工作模式2</span>    TH0<span class="token operator">=</span><span class="token number">0x6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给TH0、TL0赋初值</span>    TL0<span class="token operator">=</span><span class="token number">0x6</span><span class="token punctuation">;</span>    ET0 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器允许中断开关</span>    EA <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开总中断</span>    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开定时器</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//主函数</span><span class="token punctuation">{</span>      <span class="token function">TimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用定时器</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Tmier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span> <span class="token comment" spellcheck="true">//启动中断方式1</span><span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个静态局部变量</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//循环4000达到定时1s的效果</span>    <span class="token punctuation">{</span>        led <span class="token operator">=</span><span class="token operator">~</span>led<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//led灯的状态取反</span>        i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新给i赋值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习日志</title>
      <link href="posts/6015.html"/>
      <url>posts/6015.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、51单片机定时器"><a href="#一、51单片机定时器" class="headerlink" title="一、51单片机定时器"></a>一、51单片机定时器</h1><p>1、<strong>基本概念</strong>：</p><ul><li><blockquote><p><strong>80C51有两个计数器T0和T1，每个计数器都是由两个8位的RAM 单元组成的，即每个计数器都是16 位的计数器，最大的计数容量是2的16次方=65536，记住是从0-65535。<br>定时器的本质也是计数器，只不过定时器的脉冲来自内部的晶振，而计数器的脉冲来自外部，当检测的脉冲的下降沿时，计数寄存器加一，直到溢出，然后单片机产生一个中断。所以需要定时时，先给计数寄存器设定一个初值，每有一个内部的脉冲时钟信号（相当与一段时间），计数器加一，直到溢出，一次定时完成。之后继续循环</strong> </p></blockquote></li></ul><p><br><br><br>2、<strong>相关寄存器</strong>：</p><span id="more"></span><ul><li>1：<strong>定时/计数器方式寄存器TMOD（只能段寻址）</strong></li></ul><ul><li><p>GATE—门控制位。</p><p> GATE=0，定时器/计数器启动与停止仅受TCON寄存器中TRX(X=0,1)来控制。</p><p> GATE=1，定时器计数器启动与停止由TCON寄存器中TRX(X=0,1)和外部中断引脚（INT0或INT1）上的电平状态来共同控制。</p><p> C/T—定时器和计数器模式选择位。</p><p> C/T=1，为计数器模式；</p><p> C/T=0，为定时器模式。</p></li></ul><ul><li><strong>M0 M1–工作模式选择位</strong></li></ul><table><thead><tr><th>M1</th><th>M0</th><th>工作模式</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>方式0，为13位定时器/计数器</td></tr><tr><td>0</td><td>1</td><td>方式1，为16位定时器/计数器</td></tr><tr><td>1</td><td>0</td><td>方式2，8位初值自动重装的8位定时器/计数器</td></tr><tr><td>1</td><td>1</td><td>方式3，仅适用于T0，分为两个8位计数器，T1停止工作</td></tr></tbody></table><p><br><br></p><ul><li><p>2<br>： <strong>定时器/控制器控制寄存器TCON（可以位寻址）</strong></p><p>  IT0：外部中断0触发方式控制位</p><p>当IT0=0时，为电平触发方式（低电平有效）</p><p>当IT0=1时，为边沿触发方式（下降沿有效）</p><p>IE0：外部中断0中断请求标志位 （硬件自动完成）</p><p>IT1：外部中断1触发方式控制位（同IT0）</p><p>IE1：外部中断1中断请求标志位 （同IE0）</p><p>  TF0：定时/计数器T0溢出中断请求标志位</p><p>TF1：定时/计数器T1溢出中断请求标志位</p></li></ul><p>TR1：定时器1运行控制位。</p><p>由软件清0关闭定时器1。当GATE=1，且INIT为高电平时，TR1置1启动 定时器1；当GATE=0时，TR1置1启动定时器1。<br>TR0—定时器0运行控制位，其功能及操作方法同TR1。<br><br><br><br><br></p><h2 id="80C51单片机-LED定时1s交替闪烁"><a href="#80C51单片机-LED定时1s交替闪烁" class="headerlink" title="80C51单片机-LED定时1s交替闪烁"></a>80C51单片机-LED定时1s交替闪烁</h2><ul><li><p><em>定时之前我们需要知道定时器的使用方法以及如何计算出我们需要定时时间的参数。</em></p><p>1 、<strong>定时器的使用方法</strong>：</p><p>  (1)：对TMOD复制，以确定T0和T1的工作方式</p><p>  (2)：计算初值，并将其写入TH0、TL0或TH1、TL1。</p><p>  (3)：中断方式是，打开定时器中断（ET0/ET1）及总中断EA。</p><p>  (4)：使TR0或TR1置位，启动定时。</p><p> 2：<strong>TH0  TLO  初值计算方法</strong><br> ：<strong>12T机器周期，则12MHz的晶振输入，得到1 MHz的机器周期,进而得到1 6计数器每滴答一- 下就是1us时间。16位的最多计数到65535,然后再计数一个产生溢出， 此时向CPU发起定时器中断。则1 6位的定时器可以计数65536个数，即65536us = 65. 536ms.如果我们要定时x时间，则x/1us 得到要计数多少个，我们几位N。则65536 -N就为我们的初值。在这个初值的基础上,计数N个后产生溢出，即向CPU发起中断。THO TL0分别为8位,则(65536-N) /256赋值给TH0，(65536-N) % 256求余赋值给TL0。</strong></p></li></ul><p><a href="http://www.elecfans.com/dianzichangshi/20171109577456.html">参考链接</a></p><h3 id="程序功能：实现每间隔1秒，LED灯与上次的状态相反，LED以该规律闪烁。"><a href="#程序功能：实现每间隔1秒，LED灯与上次的状态相反，LED以该规律闪烁。" class="headerlink" title="程序功能：实现每间隔1秒，LED灯与上次的状态相反，LED以该规律闪烁。"></a><strong>程序功能</strong>：实现每间隔1秒，LED灯与上次的状态相反，LED以该规律闪烁。</h3><br><h3 id="逻辑思路：通过定时1ms，循环1000次从而达到定时1s的功能。"><a href="#逻辑思路：通过定时1ms，循环1000次从而达到定时1s的功能。" class="headerlink" title="逻辑思路：通过定时1ms，循环1000次从而达到定时1s的功能。"></a><strong>逻辑思路</strong>：通过定时1ms，循环1000次从而达到定时1s的功能。</h3><p><br><br><br></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码</strong>：</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg51.h></span></span>sbit led <span class="token operator">=</span>P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定时1ms</span><span class="token punctuation">{</span>    TMOD<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择T0工作方式</span>    TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给TH0、TL0赋初值</span>    TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>    ET0 <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    EA <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    TR0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">TimerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Tmier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token comment" spellcheck="true">//中断</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    TH0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新给TH0、TL0赋初值</span>    TL0<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环1000次达到定时1s的效果</span>    <span class="token punctuation">{</span>        led <span class="token operator">=</span><span class="token operator">~</span>led<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//灯的状态取反</span>        i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
